{"name":"MECloud","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_294"},"sections":{"items":[{"components":[{"name":"lblMain","style":{"weight":"1.2"},"text":"Status","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_294"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"mqtt_host","type":"string","value":"rpi.tonik.lan:1883"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- Device Controller is a little more advanced than other types. \n-- It can create child devices, so it can be used for handling multiple physical devices.\n-- E.g. when connecting to a hub, some cloud service or just when you want to represent a single physical device as multiple endpoints.\n-- \n-- Basic knowledge of object-oriented programming (oop) is required. \n-- Learn more about oop: https://en.wikipedia.org/wiki/Object-oriented_programming \n-- Learn more about managing child devices: https://manuals.fibaro.com/home-center-3-quick-apps/\n\nlocal modeMap = {\n        cool = \"Cool\",\n        heat = \"Heat\",\n        dry = \"Drying\",\n        fan = \"Fan\",\n        auto = \"Auto\"\n    }\n\nlocal modeMapReverse = {\n        Cool = \"cool\",\n        Heat = \"heat\",\n        Drying = \"dry\",\n        Fan = \"fan\",\n        Auto = \"auto\"\n    }\n\nfunction talbeLength(t)\n    local counter = 0 \n    for k,v in pairs(t) do counter=counter+1 end\n    return counter\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp:onInit\")\n\n    -- Setup classes for child devices.\n    -- Here you can assign how child instances will be created.\n    -- If type is not defined, QuickAppChild will be used.\n    self:initChildDevices({\n        [\"com.fibaro.hvacSystemAuto\"] = MECloudDevice,\n    })\n\n    -- Print all child devices.\n    -- self:debug(\"Child devices:\")\n    -- for id,device in pairs(self.childDevices) do\n    --     self:debug(\"[\", id, \"]\", device.name, \", type of: \", device.type)\n    -- end\n\n    self.deviceMap = self:buildDevicesMap()\n    self:updateView(\"lblMain\", \"text\", string.format(\"Devices found: %s\", talbeLength(self.deviceMap)))\n    self:mqtt_connect()\nend\n\nfunction QuickApp:buildDevicesMap()\n    --self:debug(\"QuickApp:buildDevicesMap()\")\n    local DM = {}\n    for hcID,child in pairs(self.childDevices) do\n        local device_id = child:getVariable(\"device_id\")\n        local device_name = child:getVariable(\"device_name\")\n\n        if (type(DM[device_id]) ~= \"table\") then\n            DM[device_id] = {\n                device_id = device_id,\n                device_name = device_name\n            }\n        end\n        DM[device_id]['hcID'] = hcID\n    end\n    self:debug(\"DevicesMap built from childs: \"..json.encode(DM))\n    return(DM)\nend\n\nfunction QuickApp:addInterface(child, param)\n    local device = api.get('/devices/' .. tostring(child.id))\n    local found = false\n    for _, interface in ipairs(device.interfaces) do\n        if interface == param then\n            found = true\n            break\n        end\n    end\n    if not found then\n        self:debug(\"Add '\" .. param .. \"' interface to device #\" .. tostring(device.id))\n        child:addInterfaces({param})\n    end\nend\n\n-- Sample method to create a new child. It can be used in a button. \nfunction QuickApp:createChild(device)\n    local dev\n    if (type(self.deviceMap[device.id]) ~= \"table\") then\n        local child = self:createChildDevice({\n        name = device.name,\n        type = \"com.fibaro.hvacSystemAuto\",\n    }, MECloudDevice)\n        if (child) then\n            child:setVariable(\"device_id\", device.id)\n            dev = {\n                device_id = device_id,\n                hcID = child.id,\n                device\n            }\n        end\n    else \n        dev = self.deviceMap[device.id]\n        dev['device']=device\n    end\n    -- hub.call(dev.hcID, \"setVariable\", \"device_id\", device.id)\n    hub.call(dev.hcID, \"setVariable\", \"device_name\", device.name)\n    local child = self.childDevices[dev.hcID]\n    self:addInterface(child, \"coolingThermostatSetpoint\")\n    self:addInterface(child, \"hcSchedule\")\n    self:addInterface(child, \"heatingThermostatSetpoint\")\n    self:addInterface(child, \"overrideTime\")\n    self:addInterface(child, \"quickApp\")\n    self:addInterface(child, \"thermostatMode\")\n\n    hub.call(dev.hcID, \"beforeConnect\", child.properties.quickAppVariables)\n    hub.call(dev.hcID, \"connect\", dev.device)\nend\n\n-- Sample class for handling your binary switch logic. You can create as many classes as you need.\n-- Each device type you create should have its class which inherits from the QuickAppChild type.\nclass 'MECloudDevice' (QuickAppChild)\n\n-- __init is a constructor for this class. All new classes must have it.\nfunction MECloudDevice:__init(device)\n    -- You should not insert code before QuickAppChild.__init. \n    QuickAppChild.__init(self, device) \n    self:updateProperty(\"supportedThermostatModes\", {\"Auto\", \"Off\", \"Heat\", \"Cool\", \"Fan\", \"Drying\"})\n    -- self:trace(json.encode(device.properties.quickAppVariables))\nend\n\nfunction MECloudDevice:beforeConnect(variables)\n    for _,v in ipairs(variables) do\n        if v.name == \"device_id\" then\n            self.deviceId = v.value\n            break\n        end\n    end\n\n    self.status_topic='melcloud/'..self.deviceId..'/status'\n    self.update_topic='melcloud/'..self.deviceId..'/set'\nend\n\nfunction MECloudDevice:setThermostatMode(value)\n    self:debug(\"child\", self.id, \"termostat mode\", value)\n    -- self:updateProperty(\"thermostatMode\", value)\n    self.status.power = not (value == \"Off\")\n    \n    if self.status.power then\n        self.status.mode = modeMapReverse[value]\n    end\n    self.client:publish(self.update_topic, json.encode(self.status))\nend\n\nfunction MECloudDevice:setCoolingThermostatSetpoint(value)\n    self:debug(\"child\", self.id, \"cool termostat setpoint\", value)\n    -- self:updateProperty(\"coolingThermostatSetpoint\", value)\n    self.status.target=value\n    self.client:publish(self.update_topic, json.encode(self.status))\nend\n\nfunction MECloudDevice:setHeatingThermostatSetpoint()\n    self:debug(\"child\", self.id, \"heat termostat setpoint\", value)\n    -- self:updateProperty(\"heatingThermostatSetpoint\", value)\n    self.status.target=value\n    self.client:publish(self.update_topic, json.encode(self.status))\nend\n\nfunction MECloudDevice:connect(device)\n    self:trace(\"onDeviceConnect\", self.deviceId, json.encode(device))\n    if self.connected then\n        self:debug(\"Allready connected!\")\n        return\n    end\n    self.device = device\n    local mqtt_host = self.parent:getVariable(\"mqtt_host\")\n    self:debug(\"Connecting\", mqtt_host, \"device\", self.deviceId)\n    -- self:debug(\"Device\", json.encode(device))\n    self.client = mqtt.Client.connect(mqtt_host, {\n        clientId= 'fibaro_melcloud_device' .. device.name .. self.deviceId,\n        qos= mqtt.QoS.AT_LEAST_ONCE,\n        retain = true\n    })\n\n    self.client:addEventListener('message', function(e) self:onMessage(e) end)\n    self.client:addEventListener('published', function(event) self:onPublished(event) end)    \n    self.client:addEventListener('connected', \n        function(event) \n            self:debug(\"Device connected\")\n            self.connected=true\n            -- self.parent:shutterStatusChanged(self.connected, self)\n            -- self:trace(\"Subscribeing to:\", self.status_topic)\n            self.client:subscribe(self.status_topic, {qos = mqtt.QoS.AT_LEAST_ONCE})\n        end)\n    self.client:addEventListener('closed', \n        function(event) \n            self:debug(\"Device disconected\")\n            self.connected=false\n            -- self.parent:shutterStatusChanged(self.connected, self)\n        end)\nend\n\nfunction MECloudDevice:onMessage(e)\n    local val = json.decode(e.payload)\n    self.status = val\n    self:trace(\"Value changed \", json.encode(val), \"for device: \", self.deviceId, self.device.name)\n    \n    if not val.power then\n        self:updateProperty(\"thermostatMode\", \"Off\")    \n    else\n        self:updateProperty(\"thermostatMode\", modeMap[val.mode])    \n    end\n    \n    self:updateProperty(\"coolingThermostatSetpoint\", val.target)\n    self:updateProperty(\"heatingThermostatSetpoint\", val.target)\nend\n"},{"name":"mqtt_api","isMain":false,"isOpen":true,"content":"function QuickApp:mqtt_disconnect()\n    if self.client == nil and not self.connected then\n        self:debug(\"Allready disconnected!\")\n        return\n    end\n\n    self.client:disconnect()\nend\n\nfunction QuickApp:mqtt_connect()\n    if self.connected then\n        self:debug(\"Allready connected!\")\n        return\n    end\n    self:debug(\"QuickApp:connecting to mqtt\")\n    self.client = mqtt.Client.connect(self:getVariable(\"mqtt_host\"), {\n        clientId= 'fibaro_melcloud_client',\n        qos= mqtt.QoS.AT_LEAST_ONCE,\n        retain = true\n    })\n    \n    self.client:addEventListener('connected', function(event) self:onConnected(true, event) end)\n    self.client:addEventListener('closed', function(event) self:onConnected(false, event) end)  \n    self.client:addEventListener('message', function(mEvent) self:onMessage(mEvent) end)\n    self.client:addEventListener('subscribed', function(sEvent) self:onSubscribe(sEvent) end)\nend\n\nfunction QuickApp:onConnected(connected, event)\n    self.connected = connected\n    self:debug(\"client connected\")\n\n    self:updateView(\"lblControllerStatus\", \"text\", string.format(\"MQTT broker connected: %s\", self.connected))\n\n    if self.connected then\n        self.client:subscribe('melcloud/+/info', {qos = mqtt.QoS.AT_LEAST_ONCE}) \n    end\nend\n\nfunction QuickApp:onSubscribe(event)\n    self:debug(\"on subscribe\")\n    self:debug(json.encode(event))\nend\n\nfunction QuickApp:onMessage(e)\n    local device = json.decode(e.payload)\n    -- self.debug(device)\n    self:debug('device observed: ', device.name, device.id)\n    self:createChild(device)\nend\n"}]}